// Generated by jextract

package com.thiago.helloworld;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class HelloWorldDotNet  {

    public static final OfByte C_CHAR = Constants$root.C_CHAR$LAYOUT;
    public static final OfShort C_SHORT = Constants$root.C_SHORT$LAYOUT;
    public static final OfInt C_INT = Constants$root.C_LONG$LAYOUT;
    public static final OfInt C_LONG = Constants$root.C_LONG$LAYOUT;
    public static final OfLong C_LONG_LONG = Constants$root.C_LONG_LONG$LAYOUT;
    public static final OfFloat C_FLOAT = Constants$root.C_FLOAT$LAYOUT;
    public static final OfDouble C_DOUBLE = Constants$root.C_DOUBLE$LAYOUT;
    public static final OfAddress C_POINTER = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle add$MH() {
        return RuntimeHelper.requireNonNull(constants$0.add$MH,"add");
    }
    /**
     * {@snippet :
     * int add(int a, int b);
     * }
     */
    public static int add(int a, int b) {
        var mh$ = add$MH();
        try {
            return (int)mh$.invokeExact(a, b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle subtract$MH() {
        return RuntimeHelper.requireNonNull(constants$0.subtract$MH,"subtract");
    }
    /**
     * {@snippet :
     * int subtract(int a, int b);
     * }
     */
    public static int subtract(int a, int b) {
        var mh$ = subtract$MH();
        try {
            return (int)mh$.invokeExact(a, b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle multiply$MH() {
        return RuntimeHelper.requireNonNull(constants$0.multiply$MH,"multiply");
    }
    /**
     * {@snippet :
     * int multiply(int a, int b);
     * }
     */
    public static int multiply(int a, int b) {
        var mh$ = multiply$MH();
        try {
            return (int)mh$.invokeExact(a, b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle listDirs$MH() {
        return RuntimeHelper.requireNonNull(constants$0.listDirs$MH,"listDirs");
    }
    /**
     * {@snippet :
     * void listDirs(char* path);
     * }
     */
    public static void listDirs(MemorySegment path) {
        var mh$ = listDirs$MH();
        try {
            mh$.invokeExact(path);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle greet$MH() {
        return RuntimeHelper.requireNonNull(constants$0.greet$MH,"greet");
    }
    /**
     * {@snippet :
     * char* greet(char* name);
     * }
     */
    public static MemorySegment greet(MemorySegment name) {
        var mh$ = greet$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle readFile$MH() {
        return RuntimeHelper.requireNonNull(constants$0.readFile$MH,"readFile");
    }
    /**
     * {@snippet :
     * void readFile(char* path);
     * }
     */
    public static void readFile(MemorySegment path) {
        var mh$ = readFile$MH();
        try {
            mh$.invokeExact(path);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
}


